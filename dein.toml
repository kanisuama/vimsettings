# ------------------------------------------------------------------------------
# ~/vimsettings/dein.toml
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_post_update = '''
    execute 'helptags '
        \ . g:dein_dir . expand('/repos/github.com/vim-jp/vimdoc-ja/doc')
'''
hook_add = '''
    if &runtimepath !~# expand('/vimdoc-ja')
        execute 'set runtimepath+='
            \ . g:dein_dir . expand('/repos/github.com/vim-jp/vimdoc-ja')
    endif
'''

# [[plugins]]
# repo = 'Shougo/vimproc.vim'
# hook_post_update = '''
#     if     dein#util#_is_windows()
#         let cmd = 'tools\\update-dll-mingw'
#         " let cmd = 'make -f make_cygwin.mak'
#     elseif dein#util#_is_cygwin()
#         let cmd = 'make -f make_cygwin.mak'
#     elseif executable('gmake')
#         let cmd = (gmake)
#     else
#         let cmd = 'make'
#     endif
#     let g:dein#plugin.build = cmd
# '''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = '''
    if !(has('python3') && (has('nvim') || v:version >= 800))
        nnoremap [unite] <Nop>
        nmap <Space>u [unite]
        nnoremap <silent> [unite]f :<C-U>Unite file<CR>
        nnoremap <silent> [unite]m :<C-U>Unite file_mru<CR>
    endif
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
if = ''' has('python3') && (has('nvim') || v:version >= 800)'''
depends = 'neomru.vim'
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <Space>u [denite]
    nnoremap <silent> [denite]f :<C-U>Denite file_rec<CR>
    nnoremap <silent> [denite]m :<C-U>Denite -mode=normal file_mru<CR>
'''
hook_post_source = '''
    call denite#custom#source('file_rec', 'matchers', ['matcher_regexp'])
    call denite#custom#source('file_mru', 'matchers', ['matcher_regexp'])
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_junp_to_buffer      = 2
    let g:ctrlp_dotfiles            = 1
    let g:ctrlp_highlight_match     = [1, 'IncSearch']
'''

[[plugins]]
repo = 'thinca/vim-singleton'
if = ''' has('gui_running')'''
hook_source = '''
    call singleton#enable()
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_source = '''
    let g:indentLine_fileTypeExclude = ['help']
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = ['<plug>(incsearch-']
on_cmd = ['IncSearchMap', 'IncSearchNoreMap']
hook_add = '''
    let g:incsearch#auto_nohlsearch = 1
    map / <plug>(incsearch-forward)
    map ? <plug>(incsearch-backward)
    map * <plug>(incsearch-nohl-*)
    map # <plug>(incsearch-nohl-#)
    map n <plug>(incsearch-nohl-n)
    map N <plug>(incsearch-nohl-N)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<plug>(easymotion-']
hook_add = '''
    let g:EasyMotion_do_mapping       = 0
    let g:EasyMotion_enter_jump_first = 1
    let g:EasyMotion_smartcase        = 1
    let g:EasyMotion_use_migemo       = 1

    nmap <Space>f <plug>(easymotion-s2)
    " map         f <plug>(easymotion-fl)
    " map         t <plug>(easymotion-tl)
    " map         F <plug>(easymotion-Fl)
    " map         T <plug>(easymotion-Tl)
'''

# [[plugins]]
# repo    = 'thinca/vim-quickrun'
# depends = ['vimproc.vim']
# hook_add = '''
#     " Java
#     let g:quickrun_config['java/watchdogs_checker']
#     \   = {'type': 'watchdogs_checker/javac'}
#     let g:quickrun_config['watchdogs_checker/javac'] = {
#     \   'command': 'javac',
#     \   'cmdopt': join([
#     \       '-Xlint:all',
#     \       '-d $TEMP',
#     \       '-sourcepath "%{javaclasspath#source_path()}"',
#     \       '-classpath "%{javaclasspath#classpath()}"',
#     \       '-deprecation',
#     \   ]),
#     \   'exec': '%c %o %S',
#     \   'errorformat': '%A%f:%l: %m,%-Z%p^,%+C%.%#,%-G%.%#',
#     \}
# '''
 
# [[plugins]]
# repo    = 'osyo-manga/shabadou.vim'
# depends = ['vim-quickrun']
# 
# [[plugins]]
# repo = 'kamichidu/vim-javaclasspath'
 
# [[plugins]]
# repo    = 'osyo-manga/vim-watchdogs'
# depends = ['vimproc.vim', 'vim-quickrun', 'shabadou', 'vim-javaclasspath']
# hook_add = '''
#     " Check syntax after save the file.
#     " let g:watchdogs_check_BufWeitePost_enable = 1
# 
#     " Check syntax when no key has pressed long time.
#     let g:watchdogs_check_CursorHold_enable = 1
# '''

[[plugins]]
repo = 'thinca/vim-ref'
if = ''' executable('w3m') || executable('lynx')'''
on_cmd = 'Ref'
hook_add = '''
    let g:ref_source_webdict_cmd =
    \   executable('w3m')  ? 'w3m -dump %s' :
    \   executable('lynx') ? 'lynx -dump -nonumbers %s' :
    \                        ''

    let g:ref_source_webdict_sites = {
    \   'alc' : {
    \       'url' : 'http://eow.alc.co.jp/search?q=%s'
    \    },
    \   'wiki' : {
    \       'url' : 'http://ja.wikipedia.org/w/index.php?search=%s'
    \   }
    \}

    let g:ref_source_webdict_sites.default = 'alc'

    function! g:ref_source_webdict_sites.alc.filter(output)
        return s:remove_lines(a:output, 24)
    endfunction
    function! g:ref_source_webdict_sites.wiki.filter(output)
        return s:remove_lines(a:output, 2)
    endfunction
    function! s:remove_lines(output, head_lines)
        let l:removeCR = a:output
        let l:removeCR = substitute(l:removeCR, '\n\{3,}',   '\n\n',     'g')
        return join(split(l:removeCR, "\n")[a:head_lines:], "\n")
    endfunction

    nnoremap [ref] <Nop>
    nmap <Space>r [ref]
    nnoremap [ref]a :<C-U>Ref webdict alc<Space>
    nnoremap [ref]w :<C-U>Ref webdict wiki<Space>
'''

[[plugins]]
repo = 'yuratomo/w3m.vim'
on_cmd = ['W3m',      'W3mHistory', 'W3mHistoryClear', 'W3mLocal',
          'W3mSplit', 'W3mTab',     'W3mVSplit']
if = ''' executable('w3m')'''
hook_add = '''
    nnoremap <expr> <Space>w expand('%') == '' ? ':W3m ' : ':W3mTab '
'''

# [[plugins]]
# repo = 'altercation/vim-colors-solarized'
# hook_add = '''
#     set background=dark
#     augroup VimEnter * nested colorscheme solarized
# '''

