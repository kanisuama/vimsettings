# ------------------------------------------------------------------------------
# ~/vimsettings/dein.toml
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_post_update = '''
    execute 'helptags g:dein_dir'
        \ . expand('/repos/github.com/vim-jp/vimdoc-ja/doc')
'''
hook_add = '''
    if &runtimepath !~# expand('/vimdoc-ja')
        execute 'set runtimepath+='
            \ . g:dein_dir . expand('/repos/github.com/vim-jp/vimdoc-ja')
    endif
'''

# [[plugins]]
# repo = 'Shougo/vimproc.vim'
# hook_post_update = '''
#     if     dein#util#_is_windows()
#         let cmd = 'tools\\update-dll-mingw'
#         " let cmd = 'make -f make_cygwin.mak'
#     elseif dein#util#_is_cygwin()
#         let cmd = 'make -f make_cygwin.mak'
#     elseif executable('gmake')
#         let cmd = (gmake)
#     else
#         let cmd = 'make'
#     endif
#     let g:dein#plugin.build = cmd
# '''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
    nnoremap [unite] <Nop>
    nmap <Space>u [unite]
    nnoremap <silent> [unite]f :<C-U>Unite file<CR>
    augroup unite
        autocmd!
        autocmd FileType unite nmap <silent> <buffer> <expr>
            \ <S-Tab> unite#do_action('tabopen')
    augroup END
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = ['unite.vim']
hook_add = '''
    nnoremap <silent> [unite]m :<C-U>Unite file_mru<CR>
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_junp_to_buffer      = 2
    let g:ctrlp_dotfiles            = 1
    let g:ctrlp_highlight_match     = [1, 'IncSearch']
'''

[[plugins]]
repo = 'thinca/vim-singleton'
hook_add = '''
    if has('gui_running')
        call singleton#enable()
    endif
'''

# [[plugins]]
# repo = 'itchyny/lightline.vim'
# hook_add = '''
#     let g:lightline = {
#     \     'colorscheme'      : 'wombat',
#     \     'mode_map'         : {'c' : 'normal'},
#     \     'active'           : {
#     \         'left' : [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
#     \     },
#     \     'component_function' : {
#     \         'modified'     : 'LightlineModified',
#     \         'readonly'     : 'LightlineReadonly',
#     \         'fugitive'     : 'LightlineFugitive',
#     \         'filename'     : 'LightlineFilename',
#     \         'fileformat'   : 'LightlineFileformat',
#     \         'filetype'     : 'lightlinefiletype',
#     \         'fileencoding' : 'lightlinefileencoding',
#     \         'mode'         : 'LightlineMode'
#     \     }
#     \ }
# 
#     function! LightlineModified()
#         return &ft =~ 'help\|vimfiler\|gundo' ? '' :
#              \ &modified                      ? '+' :
#              \ &modifiable                    ? '' :
#              \                                  '-'
#     endfunction
# 
#     function! LightlineReadonly()
#         return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
#     endfunction
# 
#     function! LightlineFilename()
#         return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '')
#            \ . (&ft == 'vimfiler'    ? vimfiler#get_status_string() :
#               \ &ft == 'unite'       ? unite#get_status_string() :
#               \ &ft == 'vimshell'    ? vimshell#get_status_string() :
#               \ ''  != expand('%:t') ? expand('%:t') :
#               \                        '[No Name]'
#            \   )
#            \ . ('' != LightlineModified() ? ' ' . LightlineModified() : '')
#         endfunction
# 
#     function! LightlineFugitive()
#         if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
#             return fugitive#head()
#         else
#             return ''
#         endif
#         endfunction
# 
#     function! LightlineFileformat()
#         return winwidth(0) > 70 ? &fileformat : ''
#     endfunction
# 
#     function! LightlineFiletype()
#         return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
#     endfunction
# 
#     function! LightlineFileencoding()
#         return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
#     endfunction
# 
#     function! LightlineMode()
#         return winwidth(0) > 60 ? lightline#mode() : ''
#     endfunction
# '''

# [[plugins]]
# repo = 'nathanaelkane/vim-indent-guides'
# hook_add = '''
#     let g:indent_guides_enable_on_vim_startup = 1
#     " let g:indent_guides_guide_size = 1
# '''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
    let g:incsearch#auto_nohlsearch = 1
    map / <plug>(incsearch-forward)
    map ? <plug>(incsearch-backward)
    map * <plug>(incsearch-nohl-*)
    map # <plug>(incsearch-nohl-#)
    map n <plug>(incsearch-nohl-n)
    map N <plug>(incsearch-nohl-N)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    let g:EasyMotion_do_mapping       = 0
    let g:EasyMotion_enter_jump_first = 1
    let g:EasyMotion_smartcase        = 1
    let g:EasyMotion_use_migemo       = 1

    nmap <Space>f <plug>(easymotion-s2)
    map         f <plug>(easymotion-fl)
    map         t <plug>(easymotion-tl)
    map         F <plug>(easymotion-Fl)
    map         T <plug>(easymotion-Tl)
'''

# [[plugins]]
# repo    = 'thinca/vim-quickrun'
# depends = ['vimproc.vim']
# hook_add = '''
#     " Java
#     let g:quickrun_config['java/watchdogs_checker']
#     \   = {'type': 'watchdogs_checker/javac'}
#     let g:quickrun_config['watchdogs_checker/javac'] = {
#     \   'command': 'javac',
#     \   'cmdopt': join([
#     \       '-Xlint:all',
#     \       '-d $TEMP',
#     \       '-sourcepath "%{javaclasspath#source_path()}"',
#     \       '-classpath "%{javaclasspath#classpath()}"',
#     \       '-deprecation',
#     \   ]),
#     \   'exec': '%c %o %S',
#     \   'errorformat': '%A%f:%l: %m,%-Z%p^,%+C%.%#,%-G%.%#',
#     \}
# '''
 
# [[plugins]]
# repo    = 'osyo-manga/shabadou.vim'
# depends = ['vim-quickrun']
# 
# [[plugins]]
# repo = 'kamichidu/vim-javaclasspath'
 
# [[plugins]]
# repo    = 'osyo-manga/vim-watchdogs'
# depends = ['vimproc.vim', 'vim-quickrun', 'shabadou', 'vim-javaclasspath']
# hook_add = '''
#     " " 書き込み後にシンタックスチェックを行う
#     " let g:watchdogs_check_BufWeitePost_enable = 1
# 
#     " 一定時間キー入力がなかった場合にシンタックスチェックを行う
#     let g:watchdogs_check_CursorHold_enable = 1
# '''

[[plugins]]
repo = 'thinca/vim-ref'
if = ''' executable('w3m') || executable('lynx')'''
hook_add = '''
    let g:ref_source_webdict_cmd =
    \   executable('w3m')  ? 'w3m -dump %s' :
    \   executable('lynx') ? 'lynx -dump -nonumbers %s' :
    \                        ''

    let g:ref_source_webdict_sites = {
    \   'alc' : {
    \       'url' : 'http://eow.alc.co.jp/search?q=%s'
    \    },
    \   'wiki' : {
    \       'url' : 'http://ja.wikipedia.org/w/index.php?search=%s'
    \   }
    \}

    function! g:ref_source_webdict_sites.alc.filter(output)
        return s:remove_lines(a:output, 24)
    endfunction
    function! g:ref_source_webdict_sites.wiki.filter(output)
        return s:remove_lines(a:output, 2)
    endfunction
    function! s:remove_lines(output, head_lines)
        let l:removeCR = a:output
        let l:removeCR = substitute(l:removeCR, '\n\{3,}',   '\n\n',     'g')
        " let l:removeCR = substitute(l:removeCR, '\r\{3,}',   '\r\r',     'g')
        " let l:removeCR = substitute(l:removeCR, '\r\n\{3,}', '\r\n\r\n', 'g')
        return join(split(l:removeCR, "\n")[a:head_lines:], "\n")
    endfunction
    let g:ref_source_webdict_sites.default = 'alc'

    nnoremap [ref] <Nop>
    nmap <Space>r [ref]
    nnoremap [ref]a :<C-U>Ref webdict alc<Space>
    nnoremap [ref]w :<C-u>Ref webdict wiki<Space>
'''

# [[plugins]]
# repo = 'osyo-manga/ref-lynx'
# if = ''' executable('lynx')'''
# hook_add = '''
#     let g:ref_lynx_cmd              = 'lynx -dump -nonumbers %s'
#     let g:ref_lynx_use_cache        = 1
#     let g:ref_lynx_start_linenumber = 0
# '''

[[plugins]]
repo = 'yuratomo/w3m.vim'
if = ''' executable('w3m')'''
hook_add = '''
    nnoremap <expr> <Space>w expand('%') == '' ? ':W3m ' : ':W3mTab '
'''

# [[plugins]]
# repo = 'altercation/vim-colors-solarized'
# hook_add = '''
#     set background=dark
#     " colorscheme設定はsource後に行う必要があるのでVimEnterで行う
#     " ただし，colorschemeイベントの発生が抑制されないようにnestedを付ける
#     augroup VimEnter * nested colorscheme solarized
# '''

